<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
	int major = 1;
	int minor = 7;
	string version = string.Empty;
	string infoVersion = string.Empty;

	try
	{
		if (!string.IsNullOrEmpty(ExecuteGitCommand("describe --tags --exact-match")))
		{
			version = ExecuteGitCommand("describe --tags");
			infoVersion = version;
		}
	}
	catch
	{
		version = string.Empty;
		infoVersion = string.Empty;
	}

	if (string.IsNullOrEmpty(version))
	{
		try
		{
			//This is a quick and easy hack to increment the build number once a day if built
			int build = (int)(DateTime.UtcNow - new DateTime(2019, 10, 29)).TotalDays;
			//The revision represents the total number of minutes since midnight when this version was built.
			int revision = (int)DateTime.Now.TimeOfDay.TotalMinutes;
			version = string.Format("{0}.{1}.{2}.{3}", major, minor, build, revision);
			infoVersion = string.Format("{0}-{1}", version, Environment.UserName);
		}
		catch
		{
			version = string.Format("{0}.{1}.0.0", major, minor);
			infoVersion = string.Format("{0}-unknown", version);
		}
	}
 #>

 // This code was generated by a tool. Any changes made manually will be lost
 // the next time this code is regenerated.
 // 
 
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("openBVE")]
[assembly: AssemblyProduct("openBVE")]
[assembly: AssemblyCopyright("The openBVE Project")]
[assembly: ComVisible(false)]
[assembly: AssemblyVersion("<#= version #>")]
[assembly: AssemblyInformationalVersion("<#= infoVersion #>")]
[assembly: AssemblyFileVersion("<#= version #>")]
[assembly: CLSCompliant(false)]
[assembly: InternalsVisibleTo("RouteManager2")]

namespace OpenBve {
	internal static partial class Program {
		internal const string VersionSuffix = "";
	}
}

<#+
	public string ExecuteGitCommand(string arg)
	{
		using (Process process = new Process())
		{
			process.StartInfo.FileName = "git";
			process.StartInfo.Arguments = arg;
			process.StartInfo.UseShellExecute = false;
			process.StartInfo.RedirectStandardOutput = true;
			process.StartInfo.StandardOutputEncoding = Encoding.UTF8;
			process.StartInfo.RedirectStandardError = true;
			process.StartInfo.StandardErrorEncoding = Encoding.UTF8;
			process.Start();
			return process.StandardOutput.ReadToEnd().Trim();
		}
	}
 #>
